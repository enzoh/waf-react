#!/usr/bin/env python
#
# File        : wscript
# Description : Waf build script.
# Copyright   : Copyright (c) 2016 Mirror Labs Inc. All rights reserved.
# Maintainer  : Enzo Haussecker <enzo@mirror.co>
# Stability   : Stable
# Portability : Portable
#
# NOTICE: Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# This is the main Waf build script. From here, Waf will recurse into various
# subdirectories, compile source code, and generate executable files.
##

import os
import re
import signal
import time

from waflib                     import Build, Logs
from watchdog.observers.polling import PollingObserver as Observer
from watchdog.events            import FileSystemEventHandler

class RunContext(Build.InstallContext):
    cmd = fun = "run"

class TestContext(Build.InstallContext):
    cmd = fun = "test"

class WatchContext(Build.InstallContext):
    cmd = fun = "watch"

class KillContext(Build.InstallContext):
    cmd = fun = "kill"

class ChangeHandler(FileSystemEventHandler):
    def on_any_event(self, event):
        # Check if the file system event pertains to a static asset.
        workspace = self.ctx.path.abspath()
        pattern = re.compile("^%s/(html/.*\.html|css/.*\.(css|less)|js/.*\.(js|jsx))" % workspace)
        if pattern.match(event.src_path):
            # Log the file system event.
            self.ctx.start_msg("Observing static asset %s" % event.event_type)
            self.ctx.end_msg(event.src_path)
            # Reinstall the static assets.
            self.ctx.start_msg("Reinstalling static assets")
            n = os.system("%s/waf configure install > /dev/null 2>&1" % workspace)
            if n != 0:
                self.ctx.end_msg("fail", "RED")
            else:
                self.ctx.end_msg("done", "GREEN")

top = "."
out = "build"

children = ["rust", "html", "css", "js"]

def configure(ctx):
    ctx.find_program("sh", var = "SH")
    ctx.recurse(children)

def build(ctx):
    ctx.recurse(children)

def sh(ctx, script):
    bld = Build.BuildContext()
    bld.init_dirs()
    bld.env = ctx.env
    workspace = ctx.path.abspath()
    bld(name = "sh/%s" % script,
        rule = "${SH} %s/sh/%s" % (workspace, script)).post()
    bld.compile()

def run(ctx):
    sh(ctx, "run.sh")

def test(ctx):
    ctx.recurse(children)

def watch(ctx):
    ctx.logger = Logs.make_logger("%s/watch.log" % out, "watch")
    event_handler = ChangeHandler()
    event_handler.ctx = ctx
    workspace = ctx.path.abspath()
    observer = Observer()
    observer.schedule(event_handler, workspace, recursive = True)
    observer.start()
    def signal_handler(signal, frame):
        observer.stop()
    signal.signal(signal.SIGINT, signal_handler)
    signal.pause()
    observer.join()

def kill(ctx):
    sh(ctx, "kill.sh")
